{"name":"Github tutorial","tagline":"Teaching others about Github ","body":"# GitHub Tutorial\r\n\r\n_by Roxanne Condello_\r\n\r\n---\r\n## Git vs. GitHub\r\n* **Git**\r\n * Keeps track of code (\"Snapshots\") A.K.A version control\r\n * Doesn't require github\r\n \r\n* **Github**\r\n * Tracks changes\r\n * Allows you to pull/clone other peoples code in order to collaborate\r\n * Stores code and files\r\n * Needs Git in order to work\r\n <p> In order to use these commands make a github account [here](https://github.com/) </p>\r\n\r\n---\r\n\r\n## Initial Setup\r\nTo initialize git in the command line to keep track of your code you use `git init`. \r\nThis is basically telling the command line to have git keep track of the code. \r\nYou can also add your files on the stage by using `git add file.name`. The stage is where \r\nyour files will be shown on Github. \r\n\r\n\r\n---\r\n## Repository Setup\r\nA repository is also called _repo_ for short. In order to set a repo up you have to have a file \r\ncalled `README.md` so your code could appear on github. This is also stated on the website.\r\nThis may be confusing but before you add your repo you have to **make sure you are in the right folder**\r\nif you are not you will add the wrong file, it is very difficult to delete files off of github.\r\nThis is also the place where your code will appear on github you will see this on your profile and all of \r\nyour repos are listed for the world to see. \r\n\r\n\r\n---\r\n## Workflow & Commands\r\nWorkflow- A certain order in code to create the just right effect.\r\n#### _Workflow to push your code_ \r\n1. `git add file.name`\r\n2. `git commit -m \"comment for code\"`\r\n3. `git push -u origin master` only once then its `git push`\r\n\r\n#### _git commands_\r\n* `git init` - Initializes git \r\n* `git add`- adds the README.md to the stage\r\n* `git commit -m \"comment for code\"` - lets github keep track of **_all_** changes\r\n* `git push -u orgin master` - Brings the code up to github for others to use/ see.\r\n* `git push`\r\n* `git clone <SSH key>` - clones an exact copy of the code to edit but is **different** from `git pull` \r\nhas more branches to keep track \r\n* `git status`- shows the commits and files added to the stage\r\n* `git pull` - takes in exact copy of code \r\n\r\n\r\n---\r\n## Collaboration \r\n_collaboration_ - when two coders work together by cloning and forking eachothers code\r\n\r\n#### _How to fork_\r\n1. Go to the persons code on Github \r\n2. On the right corner there will be a button that says fork \r\n3. Click the button \r\n4. The code will appear on your profile\r\n\r\n#### _how to clone_\r\n1. Go to the code that you would like to clone on github\r\n2. On the right side there will be a URL \r\n3. Make sure you copy the SSH key \r\n4. then on yor command line type `git clone <SSH key>`\r\n\r\n#### _Using Git pull and pull request_\r\n<p>When the code `git pull` is used you send a pull request to the owner of the original code.\r\nIf the owner accepts it you can change the code and make suggestions to the code. The owner \r\ncan still view this code but not while the changes are being made they can see it when you push the \r\ncode back to github. It is also a benefit to commit because yo can put in a comment which makes it \r\neasier for the person you're collaborating with understands why you make the changes you made.\r\nThe owner can also use `git pull` to edit the changes you made. \r\n</p>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}